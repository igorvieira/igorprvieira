---
import type { CollectionEntry } from "astro:content";
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import FormattedDate from "../components/FormattedDate.astro";
import { SITE_URL, AUTHOR_NAME, AUTHOR_TWITTER } from "../consts";
import { getAbsoluteImageUrl } from "../utils/imageExtractor";

type Props = CollectionEntry<"blog">["data"] & {
  slug?: string;
  readingTime?: number;
};

const { title, description, pubDate, updatedDate, heroImage, slug, readingTime } = Astro.props;

// Get absolute image URL for meta tags
const imageUrl = heroImage ? getAbsoluteImageUrl(heroImage, SITE_URL) : getAbsoluteImageUrl("/placeholder-blog.svg", SITE_URL);

// Generate canonical URL
const canonicalURL = slug ? `${SITE_URL}/blog/${slug}/` : Astro.url.toString();

// Structured Data (JSON-LD) for SEO
const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": title,
  "description": description,
  "image": imageUrl,
  "datePublished": pubDate.toISOString(),
  "dateModified": updatedDate ? updatedDate.toISOString() : pubDate.toISOString(),
  "author": {
    "@type": "Person",
    "name": AUTHOR_NAME,
    "url": SITE_URL
  },
  "publisher": {
    "@type": "Person",
    "name": AUTHOR_NAME,
    "url": SITE_URL
  },
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": canonicalURL
  }
};
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} image={imageUrl} />

    <!-- Structured Data for SEO -->
    <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />

    <style>
      .title {
        font-size: 2em;
        margin: 0.25em 0 0;
      }
      hr {
        border-top: 1px solid #ddd;
        margin: 1rem 0;
      }
      .last-updated-on {
        font-style: italic;
      }

      .article-content {
        margin-bottom: 150px;
      }

      .hero-image {
        width: 100%;
        max-width: 720px;
        height: auto;
        aspect-ratio: 2 / 1;
        object-fit: cover;
        border-radius: 3px;
        margin-bottom: 1.5rem;
      }

      .post-meta {
        display: flex;
        align-items: center;
        gap: 1rem;
        color: #666;
        font-size: 0.95rem;
        margin-bottom: 1rem;
      }

      .reading-time {
        display: flex;
        align-items: center;
        gap: 0.25rem;
      }

      .reading-time::before {
        content: "ðŸ“–";
      }
    </style>
  </head>

  <body>
    <Header />
    <main>
      <article class="article-content">
        {heroImage && (
          <img
            class="hero-image"
            src={heroImage}
            alt={title}
            loading="lazy"
            decoding="async"
          />
        )}
        <h1 class="title">{title}</h1>
        <div class="post-meta">
          <FormattedDate date={pubDate} />
          {readingTime && (
             <div>- {readingTime} min read</div>
          )}
        </div>
        {
          updatedDate && (
            <div class="last-updated-on">
              Last updated on <FormattedDate date={updatedDate} />
            </div>
          )
        }
        <hr />
        <slot />
      </article>
    </main>
    <Footer />
  </body>
</html>
